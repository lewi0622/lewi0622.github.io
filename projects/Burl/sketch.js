'use strict';
//setup variables
const gif = false;
const animation = false;
const fr = 1;
const capture = false;
const capture_time = 8;

//parse by splitting at Cs, and close shape at end, first C is deleted manually
const path = "1889.35,946.906 1893.31,956.154 1896.91,965.544C1898.55,969.805 1904.88,986.434 1905.89,994.473C1906.28,997.497 1904.55,1008.74 1904.5,1009.54C1903.24,1027.73 1904.85,1027.78 1900.4,1045.58C1897.72,1056.32 1895.54,1055.76 1890.47,1065.54C1889.49,1067.43 1892.01,1068.63 1892.67,1069.74C1896.13,1075.56 1896.81,1079.82 1897.01,1087.13C1897.48,1104.42 1896.99,1121.73 1897.13,1139.02C1897.16,1143.33 1896.86,1147.69 1897.53,1151.96C1897.81,1153.76 1898.21,1156.23 1899.91,1156.88C1904.7,1158.72 1938.58,1163 1947.87,1172.87C1951.22,1176.43 1954.16,1186.5 1955.33,1189.88C1963.15,1212.57 1969.18,1241.83 1989.32,1257.72C1996.97,1263.76 2020.27,1260.97 2024.55,1261.36C2042.07,1262.98 2059.82,1266.98 2076.3,1273.15C2092.23,1279.11 2110.35,1286.84 2121.33,1300.8C2135.2,1318.45 2144.7,1338.19 2162.82,1352.21C2173.77,1360.69 2185.13,1366.71 2197.78,1372.36C2227.43,1385.6 2262.25,1391.84 2280.93,1421.5C2290.3,1436.38 2289.39,1455 2290.13,1471.92C2291.24,1497.32 2292.01,1522.73 2292.88,1548.14C2293.75,1573.37 2294.39,1598.6 2295.35,1623.82C2295.85,1636.77 2294.28,1650.33 2298.51,1662.58C2306.56,1685.89 2320.76,1707.87 2323.21,1733.06C2324.32,1744.44 2322.02,1758.81 2318.31,1769.48C2316.42,1774.89 2312.31,1784.96 2306.41,1789.13C2303.85,1790.94 2300,1790.66 2297.78,1792.88C2296.27,1794.38 2295.43,1799.69 2294.83,1801.25C2291.63,1809.61 2285.15,1813.99 2276.58,1816.52C2256.92,1822.33 2256.28,1817.07 2236.03,1820.97C2234.82,1821.2 2235.2,1823.34 2235.22,1824.58C2235.35,1831.25 2237,1843.52 2244.81,1845.91C2248.3,1846.98 2252.02,1847.26 2255.48,1848.44C2257.03,1848.97 2259.31,1849.38 2259.69,1850.97C2261.25,1857.58 2257.91,1864.74 2259.48,1871.35C2260.91,1877.41 2266.7,1875.98 2271.44,1878.68C2275.85,1881.19 2278.07,1885.92 2279.33,1890.55C2283.66,1906.54 2285.96,1927.96 2280.02,1943.75C2274.66,1958.01 2265.8,1968.7 2262.25,1984.11C2260.99,1989.59 2258.72,2001.06 2261.67,2007.87C2263.88,2012.96 2265.8,2011.32 2268.5,2016.12C2271.27,2021.05 2270.44,2028.66 2268.02,2033.51C2265.77,2038.03 2263.47,2042.63 2260.19,2046.46C2251.07,2057.14 2248.29,2054.22 2239.9,2065.54C2236.35,2070.34 2233.38,2075.54 2230.37,2080.7C2206.39,2121.83 2184.77,2165.37 2149.82,2198.75C2128.42,2219.19 2100.16,2231.41 2079.9,2252.83C2066.89,2266.57 2063.04,2288.48 2054.41,2304.8C2041.14,2329.92 2024.55,2350.97 2007.32,2373.24C2005.78,2375.22 2011.05,2383.26 2011.38,2384.37C2012.37,2387.73 2016.04,2399.74 2012.52,2403.97C2007.17,2410.38 2000.22,2406.94 1993.33,2406.87C1985.59,2406.79 1981.63,2407.36 1974.71,2410.97C1962.04,2417.58 1952.97,2430.1 1944.17,2440.7C1939.66,2446.13 1934.97,2451.44 1930.83,2457.16C1929.2,2459.42 1930.18,2462.97 1930.62,2465.22C1931.5,2469.83 1934.14,2477.73 1933.18,2483.25C1932.43,2487.55 1930.41,2490.64 1926.24,2492.45C1923.48,2493.64 1918.5,2491.63 1917.44,2494.45C1914.84,2501.39 1916.97,2509.28 1917.15,2516.69C1917.55,2533.23 1918.85,2549.75 1919.19,2566.3C1919.75,2593.52 1920.93,2612.6 1917.15,2637.41C1914.97,2651.75 1902.39,2652.79 1891.2,2658.27C1875.71,2665.84 1864.42,2678.54 1855.99,2693.4C1850.75,2702.62 1854.84,2712.45 1851.77,2722.31C1844.12,2746.88 1823.88,2767.66 1822.6,2794.16C1822.32,2799.84 1825.08,2814.34 1825.23,2817.81C1825.74,2829.86 1820.79,2844.79 1813.08,2854.01C1800.01,2869.67 1778.53,2862.76 1761.91,2860.14C1759.12,2859.7 1750.86,2858.04 1747.7,2860.57C1745.98,2861.95 1745.21,2864.31 1744.62,2866.44C1742.35,2874.6 1742.78,2883.31 1740.95,2891.57C1735.33,2916.93 1721.51,2936.93 1699.3,2950.3C1676.06,2964.28 1647.88,2971.75 1621.02,2973.68C1614.39,2974.16 1607.68,2973.78 1601.11,2972.86C1598.48,2972.49 1578.4,2964.34 1570.67,2969.26C1567.45,2971.32 1564.95,2974.43 1562.74,2977.55C1555.74,2987.46 1539.78,3018.77 1536.59,3026.11C1534.32,3031.34 1535.8,3037.63 1533.89,3043.01C1528.86,3057.16 1508.11,3069.19 1495.67,3074.53C1489.48,3077.2 1460.53,3080.63 1459.59,3080.74C1371.69,3091.06 1369.09,3089.93 1263.17,3098.72C1253.41,3099.53 1240.76,3099.87 1231.17,3103.58C1222.57,3106.89 1215.03,3112.64 1206.38,3115.81C1196.9,3119.29 1188.08,3120.49 1177.87,3120.97C1123.86,3123.53 1067.65,3109.07 1015.91,3097.56C973.007,3088.02 929.7,3075.52 888.873,3059.16C877.34,3054.54 866.289,3048.79 854.891,3043.85C838.241,3036.62 833.159,3033.65 815.806,3032.01C801.054,3030.62 786.529,3034.85 771.828,3033.62C760.245,3032.64 751.355,3029.69 741.516,3023.09C721.428,3009.61 691.201,2974.54 680.222,2962.78C659.289,2940.37 638.709,2917.62 617.854,2895.14C595.29,2870.81 572.88,2846.33 549.964,2822.33C524.558,2795.72 494.652,2772.64 474.289,2742C444.13,2696.62 440.051,2635.06 442.001,2582.18C442.721,2562.66 443.213,2543.35 448.045,2524.38C451.777,2509.73 454.858,2502.53 463.414,2490.26C469.092,2482.13 478.94,2478.36 486.37,2472.29C503.847,2458.01 514.449,2438.11 522.446,2417.4C524.254,2412.72 526.744,2400.82 526.352,2395.47C524.548,2370.87 506.423,2346.78 492.626,2327.55C476.66,2305.31 459.169,2284.18 443.288,2261.88C434.357,2249.34 424.098,2235.78 420.558,2220.22C419.446,2215.33 419.372,2186.12 419.479,2183.91C420.493,2163.08 433.183,2147.93 446.04,2132.64C454.257,2122.88 472.416,2107.15 473.941,2091.65C475.609,2074.69 453.748,2067.17 456.085,2050.58C457.272,2042.14 462.76,2041.13 470.444,2039.94C473.643,2039.45 482.618,2041.18 482.571,2035.11C482.284,1997.95 477.187,1954.77 494.222,1919.89C496.702,1914.81 515.911,1889.44 516.816,1888.12C532.609,1865.05 544.081,1844.98 560.542,1822.23C566.724,1813.69 575.278,1806.77 580.201,1797.45C582.526,1793.04 581.218,1787.54 581.484,1782.57C582.505,1763.49 581.225,1742.23 586.874,1723.5C588.011,1719.74 590.187,1713.25 594.217,1710.57C598.382,1707.81 599.845,1708.88 600.87,1703.46C604.515,1684.17 604.705,1662.97 604.956,1644C605.275,1619.87 605.369,1595.73 604.553,1571.61C603.766,1548.38 594.329,1524.65 591.105,1501.7C587.358,1475.01 589.783,1475.03 586.878,1448.38C585.29,1433.81 579.122,1424.65 573.8,1411.5C570.652,1403.73 568.813,1392.44 567.959,1384.57C564.921,1356.59 563.236,1332.3 563.076,1304.2C562.988,1288.65 566.535,1273.31 564.849,1257.82C562.194,1233.43 550.892,1209.71 541.947,1187.43C538.13,1177.92 532.153,1163.04 525.905,1154.36C520.302,1146.57 500.813,1127.84 495.818,1122.28C483.544,1108.63 474.232,1097.67 464.709,1082.74C461.152,1077.16 456.831,1071.87 454.664,1065.62C453.58,1062.49 454.861,1058.99 455.343,1055.71C456.301,1049.21 457.877,1042.82 458.98,1036.35C461.955,1018.88 466.988,998.462 460.984,980.982C451.647,953.803 425.786,929.079 406.161,910.537C390.987,896.201 368.382,887.169 360.251,867.942C355.747,857.29 352.847,836.363 352.006,828.556C350.787,817.252 350.426,805.863 350.222,794.496C349.633,761.613 365.053,725.453 373.902,696.692C380.019,676.811 386.827,657.144 392.763,637.208C399.792,613.599 401.429,586.953 414.924,565.654C420.467,556.905 423.472,560.127 430.261,552.093C432.047,549.98 432.043,546.849 432.73,544.17C434.239,538.288 435.08,532.235 436.845,526.425C438.965,519.451 441.418,512.558 444.365,505.89C449.766,493.669 461.24,486.844 470.149,477.534C477.763,469.577 482.375,461.125 490.777,453.856C517.821,430.46 556.019,429.319 588.339,418.297C593.912,416.397 598.797,412.875 603.876,409.898C626.585,396.588 625.685,395.475 649.18,383.195C653.73,380.816 663.127,376.796 668.692,376.261C709.47,372.34 716.046,374.501 759.089,373.285C776.272,372.799 792.263,371.679 808.892,366.914C817.941,364.321 835.07,359.022 839.442,347.988C846.564,330.015 844.087,306.17 864.739,297.024C877.712,291.278 886.186,290.648 900.079,289.956C940.392,287.946 981.071,288.761 1020.93,282.413C1054.56,277.057 1087.06,268.902 1118.41,255.337C1125.23,252.381 1163.68,231.921 1181.24,227.341C1210.39,219.737 1239.15,224.335 1267.8,231.434C1276.24,233.527 1284.84,235.154 1293.04,238.064C1303.97,241.94 1333.55,258.548 1340.83,262.972C1355.11,271.652 1371.72,284.003 1383.59,295.554C1395.21,306.852 1405.34,318.564 1413.77,332.231C1447.52,386.935 1435.1,448.996 1430,510.223C1424.55,575.575 1415.34,640.569 1409.48,705.886C1409.21,708.894 1416.17,709.102 1416.61,709.071C1422.43,708.655 1428.25,707.913 1433.94,706.656C1471.67,698.323 1509.29,682.537 1543.61,665.061C1567.59,652.855 1587.49,638.01 1601.34,614.418C1607.94,603.183 1609.02,588.972 1620.18,580.915C1622.6,579.171 1625.74,578.66 1628.67,578.108C1643.76,575.263 1678.5,575.372 1686.64,575.491C1709.07,575.82 1731.48,576.694 1753.87,578.009C1757.65,578.231 1761.52,578.715 1765.04,580.098C1821.34,602.177 1872.91,650.586 1889.31,709.985C1897.11,738.241 1896.21,769.532 1895.19,798.501C1894.41,820.44 1893.46,842.38 1891.92,864.278C1890.19,888.776 1887.79,913.222 1885.38,937.662"
const mouse_coords = [];
let font, img, outline_x_offset, outline_y_offset;

const small_knots = JSON.parse('[{"x":101.77777777777777,"y":84.44444444444444},{"x":109.77777777777777,"y":92.44444444444444},{"x":113.77777777777777,"y":98.66666666666667},{"x":125.77777777777777,"y":99.55555555555556},{"x":131.11111111111111,"y":98.66666666666667},{"x":133.77777777777777,"y":91.55555555555556},{"x":132.44444444444446,"y":86.66666666666667},{"x":127.55555555555556,"y":83.55555555555556},{"x":120.88888888888889,"y":80},{"x":116.88888888888889,"y":78.22222222222223},{"x":117.77777777777777,"y":75.55555555555556},{"x":125.33333333333333,"y":73.77777777777777},{"x":139.11111111111111,"y":74.22222222222223},{"x":147.55555555555554,"y":75.11111111111111},{"x":155.11111111111111,"y":69.77777777777777},{"x":157.33333333333334,"y":64},{"x":160.88888888888889,"y":54.22222222222222},{"x":169.33333333333334,"y":56},{"x":178.66666666666666,"y":58.666666666666664},{"x":184.44444444444446,"y":57.333333333333336},{"x":199.55555555555554,"y":54.666666666666664},{"x":205.77777777777777,"y":50.666666666666664},{"x":224,"y":45.77777777777778},{"x":226.22222222222223,"y":48.888888888888886},{"x":234.22222222222223,"y":45.333333333333336},{"x":241.77777777777777,"y":49.333333333333336},{"x":237.77777777777777,"y":54.666666666666664},{"x":237.77777777777777,"y":64.88888888888889},{"x":244.44444444444446,"y":64.88888888888889},{"x":248.44444444444446,"y":60},{"x":252,"y":55.111111111111114},{"x":258.6666666666667,"y":60},{"x":265.3333333333333,"y":64.88888888888889},{"x":253.77777777777777,"y":82.66666666666667},{"x":253.77777777777777,"y":97.33333333333333},{"x":231.55555555555554,"y":109.77777777777777},{"x":226.22222222222223,"y":110.66666666666667},{"x":225.77777777777777,"y":118.22222222222223},{"x":232.44444444444446,"y":120},{"x":234.66666666666666,"y":118.22222222222223},{"x":231.55555555555554,"y":116},{"x":229.77777777777777,"y":116},{"x":229.77777777777777,"y":116},{"x":217.77777777777777,"y":124.88888888888889},{"x":218.66666666666666,"y":129.33333333333334},{"x":214.66666666666666,"y":132.44444444444446},{"x":211.55555555555554,"y":126.66666666666667},{"x":208.88888888888889,"y":123.55555555555556},{"x":207.55555555555554,"y":123.55555555555556},{"x":203.11111111111111,"y":119.55555555555556},{"x":201.33333333333334,"y":118.22222222222223},{"x":198.66666666666666,"y":117.33333333333333},{"x":191.55555555555554,"y":117.33333333333333},{"x":184.88888888888889,"y":116.44444444444444},{"x":177.33333333333334,"y":116},{"x":171.11111111111111,"y":117.33333333333333},{"x":167.11111111111111,"y":124},{"x":173.33333333333334,"y":126.22222222222223},{"x":183.11111111111111,"y":124.88888888888889}]');
//   {x: 101.77777777777777, y: 85.33333333333333},
//   {x: 119.55555555555556, y: 93.33333333333333},
//   {x: 136.88888888888889, y: 84},
//   {x: 147.11111111111111, y: 102.66666666666667},
//   {x: 128.44444444444446, y: 105.77777777777777},
//   {x: 153.77777777777777, y: 72},
//   {x: 186.66666666666666, y: 60.888888888888886},
//   {x: 230.66666666666666, y: 116.44444444444444},
//   {x: 240.88888888888889, y: 63.55555555555556},
//   {x: 225.77777777777777, y: 48},
//   {x: 172.88888888888889, y: 123.55555555555556},
//   {x: 201.77777777777777, y: 122.22222222222223},
//   {x: 307.1111111111111, y: 116.44444444444444},
//   {x: 117.33333333333333, y: 144.44444444444446},
//   {x: 108, y: 155.11111111111111},
//   {x: 107.55555555555556, y: 167.55555555555554},
//   {x: 140.44444444444446, y: 202.22222222222223},
//   {x: 164, y: 187.55555555555554},
//   {x: 180.88888888888889, y: 175.11111111111111},
//   {x: 208.88888888888889, y: 167.11111111111111},
//   {x: 317.77777777777777, y: 187.55555555555554},
//   {x: 324, y: 171.55555555555554},
//   {x: 345.3333333333333, y: 179.11111111111111},
//   {x: 241.33333333333334, y: 228.88888888888889},
//   {x: 260.8888888888889, y: 265.77777777777777},
//   {x: 289.77777777777777, y: 298.6666666666667}
// ];

function gui_values(){
  parameterize("outline_divisor", 6, 1, 10, 0.01, false);
  parameterize("weight", 0.65, 0.01, 10, 0.01, true);
  parameterize("number_of_points", 300, 4, 1000, 1, false);
  parameterize("number_of_rings", 600, 1, 800, 1, false);
  parameterize("max_noise", 5, 0, 1000, 1, false);
  parameterize("x_noise_damp", 1, 1, 1000, 1, false);
  parameterize("y_noise_damp", 1, 1, 1000, 1, false);
  parameterize("radius_inc", 4, 1, 10, 0.1, true);
}

function preload(){
  // img = loadImage("Preferred_Orientation.jpeg");
}

function setup() {
  common_setup(400, 600);
  // opentype.load('..\\..\\fonts\\PeachyRoseRegular-w1xpw.ttf', function (err, f) {
  //   if (err) {
  //     alert('Font could not be loaded: ' + err);
  //   } else {
  //     font = f
  //     console.log('font ready')
  //     draw();
  //   }
  // })
}
//***************************************************
function draw() {
  global_draw_start();

  //outline shape processing
  let split_path = path.split("C");
  let subdivided_path = [];
  split_path.forEach(p => {
    const points = p.split(/,| /);
    const pt_array = [];
    for(let i=0; i<points.length; i++){
      pt_array.push(parseFloat(points[i])*global_scale/outline_divisor);
    }
    subdivided_path.push(pt_array);
  });

  //actual drawing stuff
  push();

  const brown = "#604747";
  const tan = "#e1d8c1";
  noFill();
  background("WHITE");

  stroke(tan);
  strokeWeight(weight*4);
  //outline clip
  outline_x_offset = -15*global_scale;
  outline_y_offset = -2*global_scale;
  translate(outline_x_offset,outline_y_offset);
  beginShape();
  const starting_x = subdivided_path[0][0];
  const starting_y = subdivided_path[0][1];
  vertex(starting_x, starting_y);
  subdivided_path.forEach(pts => {
    bezierVertex(...pts);
  });
  endShape(CLOSE);
  drawingContext.clip(); //CLIP ALL BELOW TO SHAPE ABOVE

  // let fSize = 200*global_scale;
  // let msg = "BURL"
  // let text_path = font.getPath(msg, 50*global_scale, canvas_y/2, fSize)
  // draw_open_type_js_path(text_path);
  // drawingContext.clip();
  translate(-outline_x_offset, -outline_y_offset);
  push();
  if(type == 'svg'){
    const canvas_tag = document.getElementById("defaultCanvas0");
    canvas_tag.children[0].style.mixBlendMode = "multiply";
  }
  else blendMode(MULTIPLY);
  translate(canvas_x/2, canvas_y/2);
  stroke(tan);
  strokeWeight(weight);
  rings(number_of_points, number_of_rings, 30*global_scale, 1, 1, 2*global_scale, 0.5, 1*global_scale, 1*global_scale);
  pop();
  // image(img, 0, 0, 480*global_scale, 640*global_scale);

  // stroke(tan);
  // strokeWeight(weight);

  // for(let z=0; z<small_knots.length; z++){
  //   push();
  //   const coords = small_knots[z];
  //   translate(coords.x*global_scale, coords.y*global_scale);
  //   // rings(number_of_points, number_of_rings, max_noise, x_noise_damp, y_noise_damp, radius_inc, 0);
  //   pop();
  // }
  pop();

  //set multiply mode for each path
  if(type == "svg") document.getElementsByTagName("path").forEach(p => p.style.mixBlendMode = "multiply");

  global_draw_end();
}
//***************************************************
//custom funcs
function rings(num_points, num_rings, noise_max, x_damp, y_damp, rad_inc, rotation, x_drift, y_drift){
  const noise_offset = random(100000)
  const xoff_offset = random(360);
  //add noise offset for different ring groupings
  const radii = new Array(num_points).fill(0);
  for(let i=0; i<=num_rings; i++){
    translate(random(-x_drift, x_drift), random(-y_drift, y_drift));
    rotate(random(-rotation, rotation));
    let lerp_noise = lerp(0,noise_max,i/num_rings);
    beginShape();
    for(let j=0; j<num_points; j++){
      const theta = 360/num_points*j;
      const xoff = map(cos(theta+xoff_offset),-1,1,0,lerp_noise);
      const yoff = map(sin(theta),-1,1,0,lerp_noise);
      let r = radii[j] + map(noise(noise_offset + xoff/x_damp, noise_offset + yoff/y_damp),0,1, 0,rad_inc);
      let x = r * cos(theta);
      let y = r * sin(theta);
      for(let z=0; z<small_knots.length; z++){
        const coords = small_knots[z];
        if(dist(x,y, coords.x*global_scale-canvas_x/2, coords.y*global_scale-canvas_y/2)<10*global_scale){
          // circle(x,y, 2*global_scale);
          // break;
        }
      }
      vertex(x,y);
      // circle(x,y,0.01*global_scale);
      radii[j] = r;
    }
    
    endShape(CLOSE);
  }
}

function mouseClicked(){
  mouse_coords.push({x:mouseX/global_scale, y:mouseY/global_scale});
  print(JSON.stringify(mouse_coords));
}

function draw_open_type_js_path_p5_commands(path){  
  for (let cmd of path.commands) {
    if (cmd.type === 'M') { //move to
      beginShape();
      vertex(cmd.x, cmd.y);
    } 
    else if (cmd.type === 'L')vertex(cmd.x, cmd.y); //line to
    else if (cmd.type === 'C') bezierVertex(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y); // bezier to 
    else if (cmd.type === 'Q') quadraticVertex(cmd.x1, cmd.y1, cmd.x, cmd.y); //quadratic to
    else if (cmd.type === 'Z') endShape(CLOSE); // close shape
  } 
}

function draw_open_type_js_path_canvas_commands(path){  
  for (let cmd of path.commands) {
    if (cmd.type === 'M') { //move to
      drawingContext.beginPath();
      drawingContext.moveTo(cmd.x, cmd.y);
    } 
    else if (cmd.type === 'L') drawingContext.lineTo(cmd.x, cmd.y); //line to
    else if (cmd.type === 'C') drawingContext.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y); // bezier to 
    else if (cmd.type === 'Q') drawingContext.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y); //quadratic to
    else if (cmd.type === 'Z') drawingContext.closePath(); // close shape
  } 
}